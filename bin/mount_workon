#!/bin/zsh

VIRTUALENVWRAPPER_PYTHON=$(which python)

if [ ! $(command -v original_workon >/dev/null 2>&1) ]; then
    if [ ! $(command -v virtualenvwrapper_lazy.sh >/dev/null 2>&1) ]; then
        . $(which virtualenvwrapper.sh)
        eval "$(echo "original_workon() {"; declare -f workon | tail -n +2)"
    fi
fi

function mount_file(){
    dir="$1"
    image="$dir.sparseimage"

    if [ -d "$dir" ]; then
        empty=$(ls -a "$dir")
        if [ -z "$empty" ]; then
            echo "Removing empty dir $dir"
            rmdir -v "$dir"
        fi
    fi

    if [ -f "$image" ] && [ ! -d "$dir" ]; then
        echo "Attaching $image to $dir"
        hdiutil attach -mountroot $(dirname "$dir") "$image"
    fi
}

function unmount_file(){
    if [ -d "$1" ]; then
        echo "Unmounting $1"
        ~/bin/unmount_image "$1" &
    fi
}

function workon(){
    project_dir="$HOME/workspace/$1"
    env_dir="$HOME/envs/$1"
    mount_file "$project_dir"
    mount_file "$env_dir"
    if [ ! -d "$project_dir" ] && [ ! -d "$env_dir" ]; then
        mkproject "$1"
        cd "$project_dir"
    elif [ -d "$env_dir" ]; then
        original_workon "$1"
    else
        echo "No virtualenv $1, simply doing a cd to $project_dir"
        test -d "$project_dir" && cd "$project_dir"
    fi
}

function workoff(){
    project_dir="$HOME/workspace/$1"
    env_dir="$HOME/envs/$1"
    unmount_file "$project_dir"
    unmount_file "$env_dir"
}

