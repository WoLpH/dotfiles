# vim: ft=zsh

# Fixing OS X Path annoyances
if [ -x /usr/libexec/path_helper ]; then
    echo 'Removing the execute flag from the OS X path helper as it is broken'
    sudo chmod ugo-x /usr/libexec/path_helper
fi

if [ -x ~/bin/mount_workon ]; then
    export ROOT_DIR=~/
elif [ -x ./bin/mount_workon ]; then
    export ROOT_DIR=./
else;
    export ROOT_DIR=~rick/
fi

#DEBUG=1
if [ 1 -eq "$DEBUG" ]; then
    # set the trace prompt to include seconds, nanoseconds, script name and
    # line number
    PS4='+$(gdate "+%s:%N") %N:%i> '
    # save file stderr to file descriptor 3 and redirect stderr (including
    # trace output) to a file with the script's PID as an extension
    exec 3>&2 2>/tmp/startlog.$$
    # set options to turn on tracing and expansion of commands contained in
    # the prompt
    setopt xtrace prompt_subst
fi

# On OS X we have GNU Date as gdate, on normal operating systems it's just date
if ! type gdate > /dev/null; then
    alias gdate=date
fi

# Tool to check the timing of the config file, handy for debugging
T=0
t(){
    T="$(gdate +%s%N)"
}
t
td(){
    # Time delta
    TD="$(($(gdate +%s%N)-T))"
    # Milliseconds
    M="$((TD/1000000))"
    echo -n "Time in milliseconds: ${M}"

    if [ 0 = "$#" ]; then
        echo
    else
        echo " for $@"
    fi
    t
}

# Load some default modules
setopt extendedglob
zmodload -a colors
zmodload -a autocomplete
zmodload -a complist

export LANG=en_US.UTF-8

# Adding my own completion functions
fpath=(/usr/local/share/zsh-completions $fpath)
fpath=(${ROOT_DIR}.zsh/site-functions $fpath)
fpath=(${ROOT_DIR}.zsh/zsh-completions/src $fpath)

# # Antigen bundles
# . ${ROOT_DIR}.antigen.zsh
# antigen bundle WoLpH/zsh-completions src
# antigen bundle git
# antigen bundle svn
# antigen bundle python
# antigen bundle pip
# antigen bundle extract
# antigen bundle sharat87/zsh-vim-mode
# antigen bundle kennethreitz/autoenv
# antigen apply

autoload -U compinit
compinit -u

# $PATH changes are done in .zprofile

# Prompts
#export PS1="$(print '%{\e[0;91m%}%n%{\e[0m%}')$(print '%{\e[0;94m%}@%{\e[0m%}')$(print '%{\e[0;92m%}%m%{\e[0m%}')# "
export PS1="$(print '%{\e[38;5;208m%}%n%{\e[0m%}')$(print '%{\e[38;5;33m%}@%{\e[0m%}')$(print '%{\e[38;5;10m%}%m%{\e[0m%}')# "
export ORIGINAL_PS1="$PS1"
export RPS1='%~'

# Enable Jedi within the normal Python interpreter
export PYTHONSTARTUP="$HOME/.pythonrc.py"
export PIP_DOWNLOAD_CACHE="$HOME/.pip/downloads/"

# Set the java home
test -x /usr/libexec/java_home && export JAVA_HOME=$(/usr/libexec/java_home)

# if we're on ec2, set the hostname to the cluster setting if available
EC2=0
if [ $(hostname | grep -E '^ip-10-') ]; then
    host=$(curl --silent http://169.254.169.254/latest/user-data/ | python -mjson.tool | grep cluster | sed 's/.*: *"\([^"]*\)".*/\1/g')
    if [ "$host" ]; then
        HOST=$host
        EC2=1
    fi
fi

if [ "$TERM" = "xterm" ]; then
    export TERM=xterm-256color
fi
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'l:|=* r:|=*' 'r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 2
# zstyle :compinstall filename '~/.zshrc'

# Allow local X access, seems to be needed for OSX to work with X properly...
#if [ -x /usr/bin/xhost ] && [ -n "$DISPLAY" ]; then
#    xhost +$(hostname -s) > /dev/null
#    xhost +$(hostname -f) > /dev/null
#fi

# if [ -x ${ROOT_DIR}bin/start_supervisord ]; then
#     sudo ${ROOT_DIR}bin/start_supervisord
# fi

# Enable keychain
command -v keychain >/dev/null 2>&1 && eval $(keychain -Q -q --eval ~/.ssh/id_dsa )

# Some convenient aliases
alias mv='nocorrect mv'       # no spelling correction on mv
alias cp='nocorrect cp'       # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias less='/usr/bin/less -R'
alias ls=/bin/ls
alias l='ls -A'
alias ll='l -l'
alias qmv='qmv -f do'
alias push='git pull; git push'
# Some people might not like this but I find it convenient. It makes find
# search in symlinks by default
alias find='find -L'
alias grep='grep --color=auto'
test -x /usr/local/bin/hub && alias git=hub
# Link vim to the OS X clipboard
#if [ -x "/usr/local/bin/reattach-to-user-namespace" ]; then
#    alias vim="reattach-to-user-namespace vim"
#    alias vimdiff="reattach-to-user-namespace vimdiff"
#fi
alias vi='vim'
alias parallel='parallel --no-notice'
alias vlc='open -a vlc'
#alias mplayer='open -a MplayerX.App --args '

# Little trick to change the name of the shell
. ${ROOT_DIR}bin/iterm2_helpers
function mosh(){
    if [ -n "$1" ]; then
        title "$1"
    fi
    /usr/local/bin/mosh $@
    title ""
}
function ssh(){
    if [ -n "$1" ]; then
        title "$1"
    fi
    /usr/bin/ssh $*
    title ""
}
title ""

# Little function to go to a random directory, handy if you have a lot of
# stuff to sort out and don't know where to start ;)
torandomdir(){
    files=(*)
    dir=("${files[RANDOM%${#files[@]}]}")
    cd "$dir"
}

torandomparentdir(){
    cd ..
    echo "$PWD"
    torandomdir
}

# ec2 utils
ec2ssh(){
    host=$(echo $@ | sed 's/.*://')
    label=$(echo $@ | sed 's/:.*//')
    echo "Connecting to $label ($host)"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$host"
    rsync -av ~/.ec2_skel/ $host:~/
    ssh -t $host exec zsh
}

update_ec2(){
    "$HOME/.ec2/list_instances.py"
}

_ec2ssh(){
    reply=(`cat ~/.ec2/instances`)
}
compctl -K _ec2ssh ec2ssh

s(){
    sudo su -m $@ -c 'exec zsh'
}

_workon_if_possible(){
    if [ -e "$WORKON_HOME/$1" ] || [ -e "$WORKON_HOME/$1.sparseimage*" ]; then
        echo "Working on $1"
        workon "$1"
        _virtualenv_tmux_name
        return true
    fi
    return false
}

_virtualenv_tmux_name(){
    if [ -n "$TMUX" ] && [ -z "$VIRTUAL_ENV" ] && [ -z "$session_name" ]; then
        export PS1="($session_name)$ORIGINAL_PS1"
    fi
}

# Auto active virtualenv for the current directory
activate(){
    if [ -e "activate" ]; then
        . ${ROOT_DIR}activate
        _virtualenv_tmux_name
        return
    fi
    # if our current dir is the name of a virtualenv, activate
    _workon_if_possible $(basename "$PWD") && return
    _workon_if_possible $(basename $(dirname "$(pwd)")) && return
}

# Virtualenvwrapper stuff
export WORKON_HOME="${HOME}/envs/"
export PROJECT_HOME="${HOME}/workspace/"
#export DISPLAY=:0

. ${ROOT_DIR}bin/mount_workon

# activate virtualenv automatically
if [[ -z "$VIRTUAL_ENV" || -n "$TMUX" ]]; then
    activate
fi

# reset all bindkeys, this makes vi mode work _much_ faster
bindkey -rpM viins '\e'

#Rebind HOME and END to do the decent thing:
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
case $TERM in (xterm*)
	bindkey '\eOH' beginning-of-line
	bindkey '\eOF' end-of-line
esac

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^E' edit-command-line

#And DEL too, as well as PGDN and insert:
bindkey '^[[3~' delete-char
bindkey '^[[6~' end-of-history
#bindkey '\e[2~' redisplay

#Now bind pgup to paste the last word of the last command,
bindkey '\e[5~' insert-last-word

# History search should use patterns on 5.x and normal search on 4.x or lower
if [[ $ZSH_VERSION == 5.* ]]; then
    bindkey '^R' history-incremental-pattern-search-backward
    bindkey '^S' history-incremental-pattern-search-forward
    bindkey '^Xr' history-incremental-pattern-search-backward
    bindkey '^Xs' history-incremental-pattern-search-forward
else
    bindkey '^R' history-incremental-search-backward
    bindkey '^S' history-incremental-search-forward
    bindkey '^Xr' history-incremental-search-backward
    bindkey '^Xs' history-incremental-search-forward
fi

bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history
bindkey '^[[C' forward-char
bindkey '^[[D' backward-char

# Color listing
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
export CLICOLOR=true
export LSCOLORS=Exfxcxdxbxegedabagacad

export EDITOR=vim

zstyle ':completion:*' list-colors 'reply=( "=(#b)(*$VAR)(?)*=00=$color[green]=$color[bg-green]" )'
zstyle ':completion:*:*:tmx:*:active-sessions' list-colors '=*=228;0'

# history settings
HISTSIZE=50000
SAVEHIST=50000

if [ -f "$PWD/.zshhistory" ]; then
    export HISTFILE="$PWD/.zshhistory"
else
    export HISTFILE=~/.zshhistory
fi

# The maximum amount of search results to show in autocompletion
LISTMAX=250

# use /etc/hosts and known_hosts for hostname completion
[ -r /etc/ssh/ssh_known_hosts ] && _global_ssh_hosts=(${${${${(f)"$(</etc/ssh/ssh_known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()
[ -r ~/.ssh/config ] && _ssh_config_hosts=(${(s: :)${(ps:\t:)${(f)"$(<$HOME/.ssh/config|grep 'Host')"}#Host}#Hostname}) || _ssh_config_hosts=()

hosts=(
  "$_global_ssh_hosts[@]"
  "$_ssh_hosts[@]"
  "$_etc_hosts[@]"
  "$_ssh_config_hosts[@]"
  "$HOST"
  localhost
)
zstyle ':completion:*:ssh:*' hosts $hosts
zstyle ':completion:*:slogin:*' hosts $hosts

# Expansion options
zstyle ':completion:*' completer _complete _prefix
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:predict:*' completer _complete

# Completion caching
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

# Expand partial paths
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-slashes 'yes'

# Include non-hidden directories in globbed file completions
# for certain commands

zstyle ':completion::complete:*' '\'

# tag-order 'globbed-files directories' all-files
zstyle ':completion::complete:*:tar:directories' file-patterns '*~.*(-/)'

# Don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# Don't complete files that vim shouldn't handle
zstyle ':completion:*:*:vi:*:*files' ignored-patterns '*?.pyc' '*?.pyo' \
        '*?.pdf' '*?.o'

# Separate matches into groups
zstyle ':completion:*:matches' group 'yes'

# Describe each match group.
zstyle ':completion:*:descriptions' format "%B---- %d%b"

# Messages/warnings format
zstyle ':completion:*:messages' format '%B%U---- %d%u%b'
zstyle ':completion:*:warnings' format '%B%U---- no match for: %d%u%b'

# Describe options in full
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'

zstyle ':completion:*' rehash true
zstyle ':completion:*' menu select=2

# start menu completion only if it could find no unambiguous initial string
zstyle ':completion:*:correct:*'       insert-unambiguous true
zstyle ':completion:*:man:*'      menu yes select
# activate menu
zstyle ':completion:*:history-words'   menu yes                            
# complete 'cd -<tab>' with menu
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select              
zstyle ':completion:*' menu select=5

test -f .zshrc_local && source .zshrc_local

if [ 1 -eq "$DEBUG" ]; then
    # turn off tracing
    unsetopt xtrace
    # restore stderr to the value saved in FD 3
    exec 2>&3 3>&-
fi

# The following lines were added by compinstall
zstyle :compinstall filename '/Users/rick/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
